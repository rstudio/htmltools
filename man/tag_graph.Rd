% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tag_env.R
\name{tag_graph}
\alias{tag_graph}
\title{Tag graph}
\usage{
tag_graph(tag)
}
\arguments{
\item{tag}{A single tag object with possibly many children tag objects. Currently, \code{\link[=tagList]{tagList()}} or \code{\link[=list]{list()}}s of tags are not allowed.}
}
\value{
A \code{tag_graph()} object. The \code{tag} supplied will be considered the \code{root} object. At the time of initialization, the \code{root} is also considered the single selected item. If any selections are made, the selected elements will be updated.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
}
\details{
This function is VERY experimental. The result api will most likely change. \strong{Use at your own risk.}

\code{tag_graph()} is built to perform highly complex alterations on a set of tags. For example, adding a class value, \code{"custom_class"}, to a grandparent of any \verb{<span>} tag that match the css selector \verb{div .inner span}. This alteration is not easily accomplished when using standard "pass by value" R objects.
}
\section{Graph components}{
\subsection{Tag environments}{

"Tag environments" are the building blocks to \code{tag_graph()}. When creating a \code{tag_graph()}, each tag object is converted to a tag environment. This conversion allows for element alterations to happen in place (pass by reference). Meaning that if a css class is added to each selected tag environment using \verb{$add_class()} and the result of the method call is ignored, the selected tag environments in the tag graph will still contain the class addition.  The added class will exist when the tag graph is converted back to standard tags objects with \verb{$root_as_tags()} or \verb{$selected_as_tags()}.

Tag environments also contain an extra field, \code{.$parent}. The \code{.$parent} value contains their parent tag environment. The \code{root} element will have a \code{NULL} value for \code{.$parent}.

The set of tag environments in a pointing to each other within a tag graph can be thought of as a linked list while allowing for a "1 to many" parent to child relationship and up to 1 parent per child.
}

\subsection{Tag graphs}{

A \code{tag_graph()} behaves simliar to an R6 object (but a tag graph is not implemented with \code{R6}). The \code{tag_graph()}'s methods will return itself as much as possible, unless the method is directly asking for information, e.g. \verb{$get_selected()} or \verb{$root_as_tags()}.

Internally, two important pieces of information are maintained: the root element and the selected elements. The root tag environment will always point (after upgrading to a tag environment) to the original tag object provided to \code{tag_graph(tag=)}. However, the selected elements are a list of tag environments that update for every \verb{$find(css_selector)} or \verb{$set_selected(selected)} call.  The selected elements are initialized to a list containing the \code{root} tag environment. All \code{tag_graph()} methods will act on the selected elements unless declared otherwise.
}
}

\section{Methods}{
All methods return the altered tag graph object unless otherwise stated.
\subsection{Select tags}{
\itemize{
\item \verb{$find(css_selector)}: Find all tag elements matching the \code{css_selector} starting from each selected element. The selected elements will be updated with the found set of tag environment.
\item \verb{$find_parents()}: Update the selected elements to contain the unique set of parents of the selected elements.
\item \verb{$find_children()}: Update the selected elements to contain all direct child elements of the selected elements.
\item \verb{$find_reset()}: Resets the selected elements to the root.
}
}

\subsection{Update selected tag info}{
\itemize{
\item \verb{$add_class(class)}: Append a class to the selected elements.
\item \verb{$add_attrs(...)}: Add element attributes to all selected children. Similar to \code{\link[=tagAppendAttributes]{tagAppendAttributes()}}.
}
}

\subsection{Adjust child elements}{
\itemize{
\item \verb{$append(...)}: Add all \code{...} objects as children after any existing children to the selected elements.
\item \verb{$prepend(...)}: Add all \code{...} objects as children before any existing children to the selected elements.
\item \verb{$empty(...)}: Remove all children in the selected elements.
}
}

\subsection{Adjust sibling elements}{
}

\subsection{Generic methods}{
\itemize{
\item \verb{$walk_selected(fn)}: Perform function \code{fn} on each of the selected elements.
}
}

\subsection{Tag Graph functions}{
\itemize{
\item \verb{$rebuild()}: Makes sure that all tags have been upgraded to tag environments. Objects wrapped in \code{HTML()} will not be inspected or altered. This method is internally called before each method executes and after any alterations where standard tag objects could be introduced into the tag structure.
\item \verb{$root()}: Return the root tag environment.
\item \verb{$get_selected()}: Returns a list of selected tag environments.
\item \verb{$get(position)}: Returns the selected tag element at the position \code{position}.
\item \verb{$set_selected(selected)}: TODO should this be included?
\item \verb{$set(tag_env, i)}: TODO should this be included?
}
}
}

\section{Convert to tags}{
\itemize{
\item \verb{$root_as_tags()}: Converts the root tag environment (and all of its children elements) back to standard tag objects and returns the root tag value.
\item \verb{$selected_as_tags()}: Converts each selected tag environments (and all of their child elements) back to standard tag objects. A \code{tagList()} is returned, wrapping around the set of selected tags.
}
}

\section{Limitations}{
\code{tag_graph()}s can \strong{not} be used directly within typical \code{tag} locations. An error should be thrown. Instead, please call \verb{$selected_as_tags()} or \verb{$root_as_tags()} to retrieve the tag structures of the selected tag elements or root element respectively.
}

