% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tag_query.R
\name{tagQuery}
\alias{tagQuery}
\title{Perform jQuery-like alterations on tags}
\usage{
tagQuery(tags)

NULL
## Query methods

Find particular subsets of HTML using CSS selectors (or R functions).
Methods that accept a `cssSelector` are currently only allowed to
reference tag names (e.g, `div`), ids (e.g., `#myID`), and classes
(e.g., `.my-class`). All query methods support combinations of tag
named, ids, and classes (e.g., `div#myID.my-class`), but only
`$find()` currently supports multiple CSS selectors (e.g. `div span`
or `div > a.my-class`).

* `$find(cssSelector)`: Get the descendants of each selected tag,
filtered by a `cssSelector` (required).
* `$children(cssSelector = NULL)`: Get the direct children of each
selected tag, optionally filtered by a `cssSelector`.
* `$parent(cssSelector = NULL)`: Get the parent of each selected tag,
optionally filtered by a `cssSelector`.
* `$parents(cssSelector = NULL)`: Get the ancestors of each selected tag,
optionally filtered by a `cssSelector`.
* `$closest(cssSelector)`: For each selected tag, get the
closest ancestor tag (including itself) satisfying a `cssSelector`.
* `siblings(cssSelector = NULL)`: Get the siblings of each selected
tag, optionally filtered by a `cssSelector`.
* `$filter(fn)`: Filter the selected tags to those for which
`fn(tag, i)` returns `TRUE`. In addition to an R function with two
arguments (the `tag` and the index `i`), `fn` may also be a valid CSS
selector.
* `$reset()`: A new `tagQuery()` object will be created with the
selected items set to the top level tag objects.
## Modify attributes

* `$addClass(class)`: `[character()]`\cr Adds class(es) to each
selected tag.
* `$removeClass(class)`: `[character()]`\cr Removes class(es) to each
selected tag.
* `$toggleClass(class)`: `[character()]`\cr If a given `class` element
is missing, add it; otherwise, remove it.
* `$addAttrs(...)`: Add a set of attributes to each selected tag.
* `$removeAttrs(attrs)`: `[character()]`\cr Remove a set of
attributes from each selected tag.
* `$emptyAttrs()`: Remove all attributes from each selected tag.
## Logical assertions

These methods return a logical vector with one element per selected
tag.

* `$hasClass(class)`: `[character()]`\cr Do selected tags have
particular class(es)?
* `$hasAttr(attr)`: `[character()]`\cr Do selected tags have
particular attributes?
## Modify children

* `$append(...)`: For each selected tag, insert `...` **after** any
existing children.
* `$prepend(...)`: For each selected tag, insert `...` **before** any
existing children.
* `$empty()`: Remove any children of each selected tag. Use this
method before calling `$append(...)` to replace the children of
each selected tag, with other content.
## Modify siblings

* `$after(...)`: Add all `...` objects as siblings after each of the
selected tags.
* `$before(...)`: Add all `...` objects as siblings before each of
the selected tags.
* `$replaceWith(...)`: Replace all selected tags with `...` in the
root tag and clear the selection.
* `$remove(...)`: Remove all selected tags from the root tag and
clear the current selection.
## Generic methods

* `$each(fn)`: Modify each selected tag with a function `fn`.
`fn` should accept two arguments: a selected element and
the selected element's position within the selected elements. This
argument order mimics jQuery's `$().each()` as there is no
concept of a `this` object inside the function execution. To stay
consistent with other methods, the each of the selected tag
environments will be given first, followed by the index position. Any
alterations to the provided tag environments will persist in calling
tag query object.
## Tag Query methods

* `$asTags(selected = TRUE)`: If `selected = TRUE`, then all
previously found elements (and their descendants) will be
converted to tags. If `selected = FALSE`, the top level tag
elements (and their descendants) will be converted to
standard tags. If there is more than one element being
returned, a `tagList()` will be used to hold all of the
objects.
* `$root()`: Return all top level (root) tags environments. If there
are more than one, it will be returned within a `tagList()`. If there
is only one tag, it will be returned.
* `$selected()`: Returns a list of selected tag environments.
* `$get(position)`: Returns the selected tag element at the position
`position`.
* `$rebuild()`: Makes sure that all tags have been upgraded to tag
environments. Objects wrapped in `HTML()` will not be inspected or
altered. This method is internally called before each method executes
and after any alterations where standard tag objects could be
introduced into the tag structure.
* `$print()`: Internal print method. Called by
`print.htmltools.tag.query()`
}
\arguments{
\item{tags}{A \code{\link[=tag]{tag()}}, \code{\link[=tagList]{tagList()}}, or \code{\link[=list]{list()}} of tags. If a \code{list()} or
\code{tagList()} is provided, a \code{tagList()} will be returned when calling
\verb{$asTags()}.}
}
\value{
A list of methods for working with the "root" \code{tags} as well as
"selected" subset of \code{tags} (by default, \code{tags} is selected, but methods
such as \verb{$find()} may be used to update the selection).
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
}
\details{
\code{tagQuery()} provides a \href{https://jquery.com/}{\code{jQuery}} inspired interface for
querying and/or modifying \code{\link[=tag]{tag()}} (and \code{\link[=tagList]{tagList()}}) objects.
}
