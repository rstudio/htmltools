% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tag_query.R
\name{tagQuery}
\alias{tagQuery}
\title{Tag Query}
\usage{
tagQuery(tags)
}
\arguments{
\item{tags}{Any standard tag object or \code{tagList()}. If a \code{list()} or
\code{tagList()} is provided, a \code{tagList()} will be returned when calling
\verb{$asTags()}.}
}
\value{
A \code{tagQuery()} object. The \code{tag} supplied will be considered the
\code{root} object. At the time of initialization, the \code{root} is also considered
the single selected item. If any selections are made, the selected elements
will be updated.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
}
\details{
This function is VERY experimental. The result api will most likely change.
\strong{Use at your own risk.}

\code{tagQuery()} is modeled after \href{https://jquery.com/}{\code{jQuery}}'s \href{https://api.jquery.com/category/manipulation/}{DOM maninipulation methods} and
\href{https://api.jquery.com/category/traversing/tree-traversal/}{Tree Traversal}
categories with some alterations. One of the main differences is that there
is no centralized \code{window.document} object to use or reference. Instead, only
the original tags provided to \code{tagQuery(tags=)} are fully search-able. This
difference requires a call to \verb{$find(cssSelector)} to make any meaningful
alterations to the \code{tagQuery()} object.

\code{tagQuery()} is built to perform complex alterations within a set of tags.
For example, it is difficult to find a set of tags and alter the parent tag
when working with standard \code{\link{tag}} objects. With \code{tagQuery()}, it is possible
to find all \verb{<span>} tags that match the css selector \verb{div .inner span}, then
ask for the grandparent tag objects, then add a class to these grandparent
tag elements.  This could be accomplished using code similar to\if{html}{\out{<div class="r tagQuery(ex_tags)$find("div .inner">}}\preformatted{span")$parent()$parent()$addClass("custom-class")$asTags(selected = FALSE)
}\if{html}{\out{</div>}}

This style of alteration is not easily achieved when using typical "pass by
value" R objects or standard tag objects.
}
\section{Tag Query components}{
\subsection{Tag environments}{

"Tag environments" are the building blocks to \code{tagQuery()}. When creating a
\code{tagQuery()}, each tag object is converted to a tag environment. This
conversion allows for element alterations to happen in place (pass by
reference). Meaning that if a css class is added to each selected tag
environment using \verb{$addClass()} and the result of the method call is ignored,
the selected tag environments within the tag query object will still contain
the class addition.  The added class will exist when the tag query tag
environment are converted back to standard tags objects with \verb{$asTags()}.

Tag environments also contain an extra field, \code{.$parent}. The \code{.$parent}
value contains their parent tag environment. The top level tags supplied to
\code{tagQuery()} will also have a shared parent element. (The shared parent
element will have a \code{NULL} \code{.$parent} value.) This allows for performing
sibling alterations at the top level of the tag query object.

The set of tag environments in a pointing to each other within a tag query
object can be thought of as a linked list while allowing for a "1 to many"
parent to child relationship and up to 1 parent per child.
}

\subsection{Tag Query}{

A \code{tagQuery()} behaves simliar to an R6 object in that internal values are altered in place. (but a \code{tagQuery()} object is
not implemented with \code{R6}). The \code{tagQuery()}'s methods will return itself as
much as possible, unless the method is directly asking for information, e.g.
\verb{$selected()} or \verb{$asTags()}.

Internally, two important pieces of information are maintained: the root
elements and the selected elements. The root tag environment will always
point (after upgrading to a tag environment) to the original tag object
provided to \code{tagQuery(tag=)}. However, the selected elements are a list of
tag environments that update for every \verb{$find(cssSelector)} call.  The
selected elements are initialized to a list containing the \code{root} tag
environment. All \code{tagQuery()} methods will act on the selected elements
unless declared otherwise.

Tag query objects can be created from other tag query objects. Note, unless there is an intermediate call to \verb{$asTags()}, the original and new tag query objects will share the same tag environments. The new tag query object will have its selected elements reset. For example:\if{html}{\out{<div class="r">}}\preformatted{x <- tagQuery(div())
y <- tagQuery(x)
z <- tagQuery(x$asTags(selected = FALSE))

# Add an example class
y$addClass("example")

# Show `x` and `y` both have the new class
x$asTags()
#> <div class="example"></div>
y$asTags()
#> <div class="example"></div>

# `z` is isolated from the changes in `x` and `y` due to the `$asTags()`
z$asTags()
#> <div></div>
}\if{html}{\out{</div>}}
}
}

\section{Limitations}{


\code{tagQuery()}s can \strong{not} be used directly within typical \code{tag} locations.
An error should be thrown. Instead, please call \verb{$asTags()} to retrieve the
tag structures of the selected tag elements or root element respectively.
}

\section{CSS Selector}{
The \code{cssSelector} parameter to many methods is a typical CSS
selector. Currently \code{tagQuery()} understands how to handle any
combination of the following CSS selector information:
\itemize{
\item \code{element}:Match against a tag name. Example: \code{div}
\item \code{id}: Match against a tag \code{id} attribute. Example: \verb{#myID}
\item \code{class}: Match against a tag's class attribute. Example: \code{.my-class}. This may include multiple classes in any order.
}

The \verb{$find(cssSelector)} method allows for a CSS selector with
multiple selections. Example: \verb{div span} or \code{.outer > span.inner}.
All other functions only allow for single-element CSS selections,
such as \code{div#myID.my-class}.
}

\section{Methods}{
All methods return the altered tag query object unless otherwise
stated.
\subsection{Select tags}{
\itemize{
\item \verb{$find(cssSelector)}: Find all tag elements matching the
multi-element \code{cssSelector} starting from each selected element's
children. If nothing has been selected, it will start from the root
elements. The tag query object's selected elements will be updated
with the matching set of tag environments. A new \code{tagQuery()} object
will be created with the selected items set to the found elements.
\item \verb{$children(cssSelector = NULL)}: Update the selected elements to
contain all direct child elements of the selected elements. If a CSS
selector is provided, only the direct children matching the
single-element CSS selector will be selected. A new \code{tagQuery()}
object will be created with the selected items set to the children
elements.
\item \verb{$parent(cssSelector = NULL)}: Update the selected elements to
contain the unique set of direct parent of the selected elements. If
a CSS selector is provided, only the direct parents matching the
single-element CSS selector will be selected. A new \code{tagQuery()}
object will be created with the selected items set to the parent
elements.
\item \verb{$parents(cssSelector = NULL)}: Update the selected elements to
contain the unique set of all ancestors of the selected elements. If
a CSS selector is provided, only the ancestors matching the
single-element CSS selector will be selected. A new \code{tagQuery()}
object will be created with the selected items set to the ancestor
elements.
\item \verb{$closest(cssSelector = NULL)}: For each selected element, get the
closest ancestor element (including itself) that matches the
single-element CSS selector. If \code{cssSelector = NULL}, it is
equivalent to calling \verb{$parent()}. A new \code{tagQuery()} object will be
created with the selected items set to the closest matching elements.
\item \code{siblings(cssSelector = NULL)}: Get the siblings of each element in
the set of matched elements. If a CSS selector is provided, only the
siblings matching the single-element CSS selector will be selected. A
new \code{tagQuery()} object will be created with the selected items set
to the sibling elements.
\item \verb{$filter(fn)}: Update the selected elements to a subset of the
selected elements given \code{fn(el, i)} returns \code{TRUE}. If \code{fn} is a CSS
selector, then the selected elements will be filtered if they match
the single-element CSS selector. A new \code{tagQuery()} object will be
created with the selected items set to the filtered selected
elements.
\item \verb{$reset()}: A new \code{tagQuery()} object will be created with the
selected items set to the top level tag objects.
}
}

\subsection{Update selected tag info}{
\itemize{
\item \verb{$addClass(class)}: Apps class(es) to each of the the selected
elements.
\item \verb{$removeClass(class)}: Removes a set of class values from all of
the selected elements.
\item \verb{$hasClass(class)}: Determine whether the selected elements have a
given class. Returns a vector of logical values.
\item \verb{$toggleClass(class)}: If the a class value is missing, add it. If
a  class value already exists, remove it.
\item \verb{$addAttrs(...)}: Add named attributes to all selected children.
Similar to \code{\link[=tagAppendAttributes]{tagAppendAttributes()}}.
\item \verb{$removeAttrs(attrs)}: Removes the provided attributes in each of
the selected elements.
\item \verb{$emptyAttrs()}: Removes all attributes in each of the selected
elements.
\item \verb{$hasAttr(attr)}: Returns a vector whose values are whether the
selected element contains the non-\code{NULL} attribute.
}
}

\subsection{Adjust child elements}{
\itemize{
\item \verb{$append(...)}: Add all \code{...} objects as children \strong{after} any
existing children to the selected elements. Similar to
\code{\link[=tagAppendChildren]{tagAppendChildren()}}
\item \verb{$prepend(...)}: Add all \code{...} objects as children \strong{before} any
existing children to the selected elements. A variation of
\code{\link[=tagAppendChildren]{tagAppendChildren()}}
\item \verb{$empty()}: Remove all children in the selected elements. Use this
method before calling \verb{$append(...)} to replace all selected
elements' children.
}
}

\subsection{Adjust Siblings}{
\itemize{
\item \verb{$after(...)}: Add all \code{...} objects as siblings after each of the
selected elements.
\item \verb{$before(...)}: Add all \code{...} objects as siblings before each of
the selected elements.
\item \verb{$replaceWith(...)}: Replace all selected elements with \code{...}. This
also sets the selected elements to an empty set. A new \code{tagQuery()}
object will be created with an empty set of selected elements.
\item \verb{$remove(...)}: Remove all selected elements from the \code{tagQuery()}
object. The selected elements is set to an empty set. A new
\code{tagQuery()} object will be created with an empty set of selected
elements.
}
}

\subsection{Generic methods}{
\itemize{
\item \verb{$each(fn)}: Perform function \code{fn} on each of the selected
elements. \code{fn} should accept two arguments: a selected element and
the selected element's position within the selected elements. This
argument order is different than jQuery's \verb{$().each()} as there is no
concept of a \code{this} object inside the function execution. To stay
consistent with other methods, the each of the selected tag
environments will be given first, followed by the index position. Any
alterations to the provided tag environments will persist in calling
tag query object.
}
}

\subsection{Tag Query methods}{
\itemize{
\item \verb{$asTags(selected = TRUE)}: If \code{selected = TRUE}, then all
previously found elements (and their descendants) will be
converted to tags. If \code{selected = FALSE}, the top level tag
elements (and their descendants) will be converted to
standard tags. If there is more than one element being
returned, a \code{tagList()} will be used to hold all of the
objects.
\item \verb{$root()}: Return all top level (root) tags environments. If there
are more than one, it will be returned within a \code{tagList()}. If there
is only one tag, it will be returned.
\item \verb{$selected()}: Returns a list of selected tag environments.
\item \verb{$get(position)}: Returns the selected tag element at the position
\code{position}.
\item \verb{$rebuild()}: Makes sure that all tags have been upgraded to tag
environments. Objects wrapped in \code{HTML()} will not be inspected or
altered. This method is internally called before each method executes
and after any alterations where standard tag objects could be
introduced into the tag structure.
\item \verb{$print()}: Internal print method. Called by
\code{print.htmltools.tag.query()}
}
}
}

