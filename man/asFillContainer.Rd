% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fill.R
\name{asFillContainer}
\alias{asFillContainer}
\alias{asFillItem}
\title{Allow tags to intelligently fill their container}
\usage{
asFillContainer(
  x,
  ...,
  height = NULL,
  width = NULL,
  asItem = FALSE,
  .cssSelector = NULL
)

asFillItem(x, ..., height = NULL, width = NULL, .cssSelector = NULL)
}
\arguments{
\item{x}{a \code{\link[=tag]{tag()}} object.}

\item{...}{currently unused.}

\item{height, width}{Any valid \link[=validateCssUnit]{CSS unit} (e.g.,
height="200px").}

\item{asItem}{whether or not to also treat the container as an item. This is
useful if the tag wants to both be a direct child of a fill container and a
direct parent of a fill item.}
}
\description{
Create fill containers and items. If a fill item is a direct child of a fill
container with a fixed height, then the item is allowed to grow and shrink to
its container's size.
}
\details{
\code{asFillContainer()} changes the CSS \code{display} property on the tag to
\code{flex}, which changes the way it does layout of it's direct children. Thus,
one should be careful not to mark a tag as a fill container when it needs
to rely on other \code{display} behavior.
}
\examples{

tagz <- div(
  id = "outer",
  style = css(
    height = "600px",
    border = "3px red solid"
  ),
  div(
    id = "inner",
    style = css(
      height = "400px",
      border = "3px blue solid"
    )
  )
)

# Inner doesn't fill outer
if (interactive()) browsable(tagz)

tagz <- asFillContainer(tagz)
tagz <- asFillItem(tagz, .cssSelector = "#inner")

# Inner does fill outer
if (interactive()) browsable(tagz)

}
