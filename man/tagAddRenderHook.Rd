% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tags.R
\name{tagAddRenderHook}
\alias{tagAddRenderHook}
\alias{tagAddPostRenderHook}
\title{Modify a tag during the render phase}
\usage{
tagAddRenderHook(tag, func, replace = FALSE)

tagAddPostRenderHook(tag, func, replace = FALSE)
}
\arguments{
\item{tag}{A \code{\link[=tag]{tag()}} or \code{\link[=tagList]{tagList()}}.}

\item{func}{A function (\emph{hook}) to call when the \code{tag} is rendered. This
function should have at least one argument (the \code{tag}).}

\item{replace}{If \code{TRUE}, the previous hooks will be removed. If \code{FALSE},
\code{func} is appended to the previous hooks.}
}
\value{
A \code{\link[=tag]{tag()}} object.
}
\description{
Add hook(s) to modify \code{\link[=tag]{tag()}} (or \code{\link[=tagList]{tagList()}}) object(s) during the render
phase (i.e., when \code{\link[=renderTags]{renderTags()}} / \code{\link[=print]{print()}} / \code{\link[=as.character]{as.character()}} / etc. happens).
}
\details{
These hooks allow tags to change their attributes (e.g., change CSS classes)
and/or change their entire HTML structure, depending upon the context in
which they're rendered. For example, you may want to an HTML widget to emit
different HTML depending on what HTML dependencies are being included on the
page.
}
\examples{
# Have a place holder div and return a span instead
obj <- div("example", .renderHook = function(x) {
  x$name <- "span"
  x
})
obj$name # "div"
print(obj) # Prints as a `span`

# Add a class to the tag
# Should print a `span` with class `"extra"`
spanExtra <- tagAddRenderHook(obj, function(x) {
  tagAppendAttributes(x, class = "extra")
})
spanExtra

# Replace the previous render method
# Should print a `div` with class `"extra"`
divExtra <- tagAddRenderHook(obj, replace = TRUE, function(x) {
  tagAppendAttributes(x, class = "extra")
})
divExtra

# Add more child tags
spanExtended <- tagAddRenderHook(obj, function(x) {
  tagAppendChildren(x, " ", tags$strong("bold text"))
})
spanExtended

# Add a new html dependency
newDep <- tagAddRenderHook(obj, function(x) {
  fa <- htmlDependency(
    "font-awesome", "4.5.0", c(href="shared/font-awesome"),
    stylesheet = "css/font-awesome.min.css")
  attachDependencies(x, fa, append = TRUE)
})
# Also add a jqueryui html dependency
htmlDependencies(newDep) <- htmlDependency(
  "jqueryui", "1.11.4", c(href="shared/jqueryui"),
  script = "jquery-ui.min.js")
# At render time, both dependencies will be found
renderTags(newDep)$dependencies

# Ignore the original tag and return something completely new.
newObj <- tagAddRenderHook(obj, function(x) {
  tags$p("Something else")
})
newObj
}
